name: Tests and code quality

on:
  push:
    branches:
      - main
      - "renovate/**"
  pull_request:
    branches:
      - main

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3
        with:
          concurrent_skipping: same_content
          do_not_skip: '["pull_request", "release", "workflow_dispatch", "schedule"]'
          skip_after_successful_duplicate: true
  quality:
    name: Code quality
    runs-on: ubuntu-latest
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    steps:
      - uses: actions/checkout@v2
      - name: Get Rust version from Dockerfile
        id: get-rust-version
        run: echo "::set-output name=RUST_VERSION::$(grep -oP 'FROM rust:\K[\d.]+' Dockerfile)"
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ steps.get-rust-version.outputs.RUST_VERSION }}
          override: true
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v1
      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --check
      - name: Lint code with Clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
  tests:
    name: Tests and code coverage
    runs-on: ubuntu-latest
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    env:
      RUSTFLAGS: -Zinstrument-coverage
      LLVM_PROFILE_FILE: coverage-%p-%m.profraw
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: llvm-tools-preview
      - uses: Swatinem/rust-cache@v1
      - name: Install grcov
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: grcov
      - name: Build the project
        uses: actions-rs/cargo@v1
        with:
          command: build
      - name: Run unit tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose
      - name: Generate coverage report
        run: grcov . -s . -b ./target/debug/ --branch --ignore-not-existing --ignore "/*" -o lcov.info
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          flags: unittests
          fail_ci_if_error: true
